{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Trajectory Clustering Model","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"ozLCDarPWRw5","colab_type":"code","colab":{}},"source":["#helper functions\n","def time_diff_in_minutes(t1,t2):\n","  diff=((t1-t2).total_seconds())/60\n","  return diff\n","\n","#calculate CRC and CRS\n","def preprocess_one_vessel(df) :\n","  df = df.reset_index(drop=True)\n","  df['CRC']=df['COG']\n","  df['CRS']=df['SOG']\n","  df.at[0,'CRS']=0\n","  df.at[0,'CRC']=0\n","  if len(df)==1:\n","    return df\n","  else:\n","    for i in range(1,len(df)):\n","      df.at[i,'CRS']=abs(df.iloc[i]['SOG']-df.iloc[i-1]['SOG'])/time_diff_in_minutes(df.iloc[i]['BaseDateTime_UTC'],df.iloc[i-1]['BaseDateTime_UTC'])\n","      df.at[i,'CRC']=abs(df.iloc[i]['COG']-df.iloc[i-1]['COG'])/time_diff_in_minutes(df.iloc[i]['BaseDateTime_UTC'],df.iloc[i-1]['BaseDateTime_UTC'])\n","    return df\n","\n","def preprocess_all_vessels(df):\n","  mmsis = df['MMSI'].unique().tolist()\n","  groupings = df.groupby('MMSI')\n","  new_df = pd.DataFrame()\n","  for mm in mmsis:\n","    group = groupings.get_group(mm).reset_index(drop=True)\n","    new_df = pd.concat([new_df,preprocess_one_vessel(group)],axis=0)\n","  return new_df\n","\n","def get_one_vessel_subtraj(df):\n","  df = df.reset_index(drop=True)\n","  new_df = pd.DataFrame()\n","  new_df['MMSI'] = df['MMSI']\n","  new_df['traj'] = np.zeros(len(df))\n","  new_df['LAT_after'] = df['LAT']\n","  new_df['LON_after'] = df['LON']\n","  new_df['SOG_after'] = df['SOG']\n","  new_df['COG_after'] = df['COG']\n","  new_df['time_after'] = df['BaseDateTime_UTC']\n","  new_df['LAT_before'] = df['LAT']\n","  new_df['LON_before'] = df['LON']\n","  new_df['SOG_before'] = df['SOG']\n","  new_df['COG_before'] = df['COG']\n","  new_df['time_before'] = df['BaseDateTime_UTC']\n","\n","  for i in range(1,len(df)):\n","    new_df.at[i,'traj']=int(i)\n","    new_df.at[i,'LAT_before'] = df.iloc[i-1]['LAT']\n","    new_df.at[i,'LON_before'] = df.iloc[i-1]['LON']\n","    new_df.at[i,'SOG_before'] = df.iloc[i-1]['SOG']\n","    new_df.at[i,'COG_before'] = df.iloc[i-1]['COG']\n","    new_df.at[i,'time_before'] = df.iloc[i-1]['BaseDateTime_UTC']\n","  new_df['traj']=new_df['traj'].astype(int)\n","  new_df = new_df.drop(new_df.index[0])\n","  return new_df\n","\n","def get_all_vessels_subtraj(df):\n","  mmsis = df['MMSI'].unique().tolist()\n","  groupings = df.groupby('MMSI')\n","  new_df = pd.DataFrame()\n","  for mm in mmsis:\n","    group = groupings.get_group(mm).reset_index(drop=True)\n","    new_df = pd.concat([new_df, get_one_vessel_subtraj(group)],axis=0)\n","  return new_df\n","\n","\n","def unit_vector(vector):\n","    \"\"\" Returns the unit vector of the vector.  \"\"\"\n","    return vector / np.linalg.norm(vector)\n","\n","def angle_between(v1, v2):\n","    \"\"\" Returns the angle in radians between vectors 'v1' and 'v2'::\n","\n","            >>> angle_between((1, 0, 0), (0, 1, 0))\n","            1.5707963267948966\n","            >>> angle_between((1, 0, 0), (1, 0, 0))\n","            0.0\n","            >>> angle_between((1, 0, 0), (-1, 0, 0))\n","            3.141592653589793\n","    \"\"\"\n","    v1_u = unit_vector(v1)\n","    v2_u = unit_vector(v2)\n","    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))\n","\n","#distance between each traj\n","def distance(df, W_s=0.4, W_d=0.3, W_v=0.3):\n","  import math\n","  distance_matrix=np.array([np.zeros(len(df))])\n","  for i in range(len(df)):\n","    D_s=np.array([])\n","    D_d=np.array([])\n","    D_v=np.array([])\n","    for j in range(len(df)):\n","      if i==j:\n","        D_s = np.append(D_s,0)\n","        D_d = np.append(D_d,0)\n","        D_v = np.append(D_v,0)\n","      else:   \n","        traj_i_before = np.array([df.iloc[i]['LAT_before'],df.iloc[i]['LON_before']])\n","        traj_i_after = np.array([df.iloc[i]['LAT_after'],df.iloc[i]['LON_after']])\n","        traj_j_before = np.array([df.iloc[j]['LAT_before'],df.iloc[j]['LON_before']])\n","        traj_j_after = np.array([df.iloc[j]['LAT_after'],df.iloc[j]['LON_after']])\n","\n","        d_between_traj_i_before_and_traj_j_before = np.linalg.norm(traj_i_before-traj_j_before)\n","        d_between_traj_i_before_and_traj_j_after = np.linalg.norm(traj_i_before-traj_j_after)\n","        d_between_traj_i_after_and_traj_j_before = np.linalg.norm(traj_i_after-traj_j_before)\n","        d_between_traj_i_after_and_traj_j_after = np.linalg.norm(traj_i_after-traj_j_after)\n","\n","        #Spatial Distance\n","        D_s = np.append(D_s,max(min(d_between_traj_i_before_and_traj_j_before,d_between_traj_i_before_and_traj_j_after),\n","        min(d_between_traj_i_after_and_traj_j_before,d_between_traj_i_after_and_traj_j_after)))\n","\n","        #Vector of 2 trajs\n","        traj_i = traj_i_after-traj_i_before\n","        traj_j = traj_j_after-traj_j_before\n","        #Length of 2 trajs\n","        traj_i_length = np.linalg.norm(traj_i)\n","        traj_j_length = np.linalg.norm(traj_j)\n","        #Angle between 2 trajs\n","        theta = angle_between(traj_i, traj_j)\n","        #Directional Distance\n","        if theta >=0 and theta<=math.pi/2:\n","          D_d = np.append(D_d,min(traj_i_length,traj_j_length)*math.sin(theta))\n","        else:\n","          D_d = np.append(D_d,min(traj_i_length,traj_j_length))\n","\n","        #Average speed of 2 trajs\n","        traj_i_v_avg = abs(df.iloc[i]['SOG_after']-df.iloc[i]['SOG_before'])/time_diff_in_minutes(df.iloc[i]['time_after'],df.iloc[i]['time_before'])\n","        traj_j_v_avg = abs(df.iloc[j]['SOG_after']-df.iloc[j]['SOG_before'])/time_diff_in_minutes(df.iloc[j]['time_after'],df.iloc[j]['time_before'])\n","        #Speed Distance\n","        D_v = np.append(D_v,abs(traj_i_v_avg-traj_j_v_avg))\n","\n","    #MinMax Transformation\n","    # D_s = (D_s-D_s.min())/(D_s.max()-D_s.min())\n","    # D_d = (D_d-D_d.min())/(D_d.max()-D_d.min())\n","    # D_v = (D_v-D_v.min())/(D_v.max()-D_v.min())\n","    SDIS = W_s*D_s+W_d*D_d+W_v*D_v\n","    distance_matrix = np.append(distance_matrix,np.array([SDIS]),axis=0) \n","  return distance_matrix"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2h37L-46VRrn","colab_type":"code","outputId":"2a7423b1-7b96-4fc4-8545-092601d95880","executionInfo":{"status":"ok","timestamp":1582719848755,"user_tz":-480,"elapsed":10683,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":433}},"source":["pip install azure.datalake.store"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting azure.datalake.store\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/27/9a/e7140775b3f8f011ef5d001c12a3519310094375671950105519e30bb12b/azure_datalake_store-0.0.48-py2.py3-none-any.whl (53kB)\n","\r\u001b[K     |██████▏                         | 10kB 18.3MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 20kB 2.2MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 30kB 3.2MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 40kB 4.2MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 51kB 2.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 61kB 2.4MB/s \n","\u001b[?25hRequirement already satisfied: requests>=2.20.0 in /usr/local/lib/python3.6/dist-packages (from azure.datalake.store) (2.21.0)\n","Requirement already satisfied: cffi in /usr/local/lib/python3.6/dist-packages (from azure.datalake.store) (1.14.0)\n","Collecting adal>=0.4.2\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/4f/b5/3ea9ae3d1096b9ff31e8f1846c47d49f3129a12464ac0a73b602de458298/adal-1.2.2-py2.py3-none-any.whl (53kB)\n","\u001b[K     |████████████████████████████████| 61kB 8.0MB/s \n","\u001b[?25hRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->azure.datalake.store) (2019.11.28)\n","Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->azure.datalake.store) (3.0.4)\n","Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->azure.datalake.store) (2.8)\n","Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->azure.datalake.store) (1.24.3)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.6/dist-packages (from cffi->azure.datalake.store) (2.19)\n","Requirement already satisfied: python-dateutil>=2.1.0 in /usr/local/lib/python3.6/dist-packages (from adal>=0.4.2->azure.datalake.store) (2.6.1)\n","Collecting PyJWT>=1.0.0\n","  Downloading https://files.pythonhosted.org/packages/87/8b/6a9f14b5f781697e51259d81657e6048fd31a113229cf346880bb7545565/PyJWT-1.7.1-py2.py3-none-any.whl\n","Collecting cryptography>=1.1.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ca/9a/7cece52c46546e214e10811b36b2da52ce1ea7fa203203a629b8dfadad53/cryptography-2.8-cp34-abi3-manylinux2010_x86_64.whl (2.3MB)\n","\u001b[K     |████████████████████████████████| 2.3MB 38.9MB/s \n","\u001b[?25hRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.1.0->adal>=0.4.2->azure.datalake.store) (1.12.0)\n","Installing collected packages: PyJWT, cryptography, adal, azure.datalake.store\n","Successfully installed PyJWT-1.7.1 adal-1.2.2 azure.datalake.store cryptography-2.8\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nPNaNz_GbtXH","colab_type":"code","outputId":"a695171d-0776-48f2-de7f-e27c14070009","executionInfo":{"status":"ok","timestamp":1582719863948,"user_tz":-480,"elapsed":25865,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":127}},"source":["import pandas as pd\n","import numpy as np\n","from datetime import datetime, timedelta\n","from azure.datalake.store import core, lib, multithread\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3_XkZs_cbv3K","colab_type":"code","colab":{}},"source":["tenant_id = \"e8e22e33-4f8e-4fc5-b212-0964c3753906\"\n","username = 'e0035251@u.nus.edu'\n","password = \"Ocean6688-=-=\"\n","store_name = \"nus\"\n","token = lib.auth(tenant_id, username, password)\n","adl = core.AzureDLFileSystem(token, store_name=store_name)\n","\n","#connect to azure datalake to fetch dataset\n","with adl.open('nus2020team02/2017/01/15/ais_southern_ships_2017_01_zone15_reduce.csv', 'rb') as f:\n","    df = pd.read_csv(f)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MDcjGB0yb4Dd","colab_type":"code","colab":{}},"source":["#map vessel type\n","vessel_info_df = pd.read_csv(u\"/content/drive/My Drive/DSA4261 Bunker Fraud/VesselTypeCodes.csv\")\n","vessel_info_dict = {}\n","for i in range(0,len(vessel_info_df)):\n","    vesselcode = float(vessel_info_df['VesselType'][i])\n","    vesselgroup = vessel_info_df['VesselGroup'][i]\n","    vessel_info_dict[vesselcode] = vesselgroup\n","\n","df['VesselType_New'] = df['VesselType'].map(vessel_info_dict)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VNxOBeaddKfS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h4BoE7WldEmt","colab_type":"code","colab":{}},"source":["# Remove VesselType_New with nan\n","df = df[~pd.isnull(df.VesselType_New)]\n","df = df[df['VesselType_New']=='Tanker']\n","df = df.dropna(subset=['LAT','LON']).reset_index(drop=True)\n","df['BaseDateTime_UTC'] = df['BaseDateTime'].apply(lambda x: datetime.strptime(x,'%Y-%m-%dT%H:%M:%S.0000000Z'))\n","\n","df['Date'] = df['BaseDateTime'].apply(lambda x:x[:10])\n","df['MMSI'] = df['MMSI'].astype(str)\n","df = df.sort_values(by=['MMSI','BaseDateTime_UTC'])\n","df = df.reset_index(drop=True)\n","df = df[['MMSI','LAT','LON','SOG','COG','BaseDateTime_UTC']]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gKScVk_ZfwM0","colab_type":"code","outputId":"d826e9ab-1353-4ad3-ddd2-3e791c12389f","executionInfo":{"status":"ok","timestamp":1582720450940,"user_tz":-480,"elapsed":784,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["len(df)"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["27349"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"A9zgDHFNdOw7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":395},"outputId":"c854b765-1e59-4221-9398-ecd8d2c02bab","executionInfo":{"status":"error","timestamp":1582720351498,"user_tz":-480,"elapsed":7457,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}}},"source":["#calculate CRC and CRS\n","new_df = preprocess_all_vessels(df)\n","\n","alpha = new_df.CRC.mean()\n","beta = new_df.CRS.mean()\n","#keep only characteristic points\n","new_df_selected = new_df[(new_df.CRC>alpha) & (new_df.CRS>beta)].reset_index(drop=True)"],"execution_count":10,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-e3cc309ee5e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnew_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpreprocess_all_vessels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0malpha\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCRC\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mbeta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCRS\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#keep only characteristic points\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-e2145df6e4e7>\u001b[0m in \u001b[0;36mpreprocess_all_vessels\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m     24\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mmm\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmmsis\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0mgroup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgroupings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m     \u001b[0mnew_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpreprocess_one_vessel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mnew_df\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-e2145df6e4e7>\u001b[0m in \u001b[0;36mpreprocess_one_vessel\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m       \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mat\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'CRS'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'SOG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'SOG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtime_diff_in_minutes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'BaseDateTime_UTC'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'BaseDateTime_UTC'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m       \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mat\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'CRC'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'COG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'COG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtime_diff_in_minutes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'BaseDateTime_UTC'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'BaseDateTime_UTC'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   2213\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_setter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2214\u001b[0m         \u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2215\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_set_value\u001b[0;34m(self, index, col, value, takeable)\u001b[0m\n\u001b[1;32m   2899\u001b[0m             \u001b[0mseries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_item_cache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2900\u001b[0m             \u001b[0mengine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2901\u001b[0;31m             \u001b[0mengine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2902\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2903\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"wFyLbD1gh-dU","colab_type":"code","colab":{}},"source":["#get clean sub trajectories\n","df_clean = get_all_vessels_subtraj(new_df_selected)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FbeFVGJtf1IB","colab_type":"code","outputId":"a7ccbb10-7dbb-4b3d-d8c8-1f99d16d29a8","executionInfo":{"status":"ok","timestamp":1582689804270,"user_tz":-480,"elapsed":8899014,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["#calculate distance matrix\n","distance_matrix = distance(df_clean)\n","distance_matrix = np.delete(distance_matrix,0,0)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:68: RuntimeWarning: invalid value encountered in true_divide\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["array([[0.00000000e+00, 8.60654900e-03, 1.37262670e-02, ...,\n","        1.37972917e+00, 1.37981232e+00, 1.38095911e+00],\n","       [1.40068059e-02, 0.00000000e+00, 1.29954703e-02, ...,\n","        1.39054655e+00, 1.39045645e+00, 1.38916655e+00],\n","       [1.30061961e-01, 1.23931969e-01, 0.00000000e+00, ...,\n","        1.46600363e+00, 1.46592389e+00, 1.46504323e+00],\n","       ...,\n","       [1.37751954e+00, 1.38480803e+00, 1.38675599e+00, ...,\n","        0.00000000e+00, 2.91182620e-04, 1.55772095e-03],\n","       [1.37752420e+00, 1.38463874e+00, 1.38658700e+00, ...,\n","        1.62376746e-04, 0.00000000e+00, 1.31736412e-03],\n","       [1.37871350e+00, 1.38339119e+00, 1.38574669e+00, ...,\n","        1.41637008e-03, 1.31736412e-03, 0.00000000e+00]])"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"VBdRF4BCD9Ow","colab_type":"code","outputId":"22bb561b-69ef-4f0a-9fb2-6805f2ff2fcd","executionInfo":{"status":"ok","timestamp":1582690203057,"user_tz":-480,"elapsed":1090,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":283}},"source":["from sklearn.cluster import DBSCAN\n","from sklearn.metrics import silhouette_score, pairwise_distances\n","from sklearn.preprocessing import StandardScaler\n","from collections import Counter\n","from matplotlib import pyplot as plt\n","\n","shortest_distance = np.array([])\n","\n","for i in range(len(distance_matrix)):\n","  shortest_distance=np.append(shortest_distance,min(distance_matrix[i][np.nonzero(distance_matrix[i])]))\n","\n","shortest_distance = np.sort(shortest_distance)\n","plt.plot(shortest_distance)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f1d7fee0dd8>]"]},"metadata":{"tags":[]},"execution_count":99},{"output_type":"display_data","data":{"image/png":"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\nnHBCNzPLif8PlR1Fo8U2zi0AAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"iLjxbzJ2pOCT","colab_type":"code","outputId":"aa401654-a507-4b52-eddb-9a3c7f30dc0d","executionInfo":{"status":"ok","timestamp":1582693107260,"user_tz":-480,"elapsed":20165,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":283}},"source":["#find optimal eps\n","eps_list = np.arange(0.01, 1, 0.01).tolist()\n","perc_anomaly = []\n","for eps in eps_list:\n","\n","  db = DBSCAN(eps=eps, min_samples=5, metric='precomputed')   #47000\n","  pred = db.fit_predict(pairwise_distances(distance_matrix))\n","  perc_anomaly.append(len(pred[pred==-1])/len(pred))\n","\n","plt.plot(eps_list, perc_anomaly)\n","\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f1d7f24dc18>]"]},"metadata":{"tags":[]},"execution_count":121},{"output_type":"display_data","data":{"image/png":"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\nA6GqRcpaglWJAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"sfp0vpmR1NKa","colab_type":"code","outputId":"cdaf9192-6e0a-42d0-cc0e-206029baf111","executionInfo":{"status":"ok","timestamp":1582693390143,"user_tz":-480,"elapsed":899,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["#pass precomputed distance matrix into DBSCAN for clustring\n","db = DBSCAN(eps=1, min_samples=5, metric='precomputed')   \n","cluster_lst = db.fit_predict(pairwise_distances(distance_matrix))\n","\n","cluster_lst"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1, -1, -1, ...,  2,  2,  2])"]},"metadata":{"tags":[]},"execution_count":122}]},{"cell_type":"code","metadata":{"id":"0vT1JfpKJH2B","colab_type":"code","outputId":"30a0e75d-8295-4689-f5bb-47ee0d241566","executionInfo":{"status":"ok","timestamp":1582695559009,"user_tz":-480,"elapsed":695,"user":{"displayName":"Yangyang Xie","photoUrl":"","userId":"12461088596346550022"}},"colab":{"base_uri":"https://localhost:8080/","height":125}},"source":["from google.colab import files\n","df_clean['cluster'] = pd.Series(cluster_lst)\n","temp = df_clean[['MMSI','LAT_after','LON_after','time_after','cluster']]\n","temp['BaseDateTime_UTC']=temp['time_after']\n","df_final = df.merge(temp.reset_index(drop=True), on = ['MMSI','BaseDateTime_UTC'],how='left')[['MMSI','LAT','LON','BaseDateTime_UTC','cluster']]\n","df_final=df_final.fillna(20)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"WXBEegHz-Mrn","colab_type":"code","colab":{}},"source":["df_final.to_csv('traj_clustering.csv',index=False)\n","files.download('traj_clustering.csv')"],"execution_count":0,"outputs":[]}]}